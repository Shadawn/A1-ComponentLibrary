Функция ДобавитьОписание(
	МассивОписаний, 
	ИмяКомпонента, 
	РодительЭлемента = Неопределено,
	ПередЭлементом = Неопределено,
	Параметры = Неопределено
	) Экспорт
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	Если НЕ РодительЭлемента = Неопределено Тогда
		Параметры.Вставить("РодительЭлемента", РодительЭлемента);
	КонецЕсли;
	Если НЕ ПередЭлементом = Неопределено Тогда
		Параметры.Вставить("ПередЭлементом", ПередЭлементом);
	КонецЕсли;
	
	НастройкиКомпонента = Новый Структура;
	Статус = А1БК_Общее.ЗаполнитьНастройки(НастройкиКомпонента, Параметры, ИмяМодуля());
	Если НЕ Статус = Неопределено Тогда
		Сообщить("Ошибка заполнения параметров: " + Статус);
		Возврат Неопределено;
	КонецЕсли;
	НастройкиКомпонента.Вставить("Заполнение", 0);
	А1Э_УниверсальнаяФорма.ДобавитьОписаниеНастроекКомпонента(
	МассивОписаний, 
	ИмяКомпонента, 
	НастройкиКомпонента
	);
	
	//ДобавитьОписаниеГруппы(МассивОписаний, ИмяКомпонента, НастройкиКомпонента);
	ДобавитьHTMLПоле(МассивОписаний, ИмяКомпонента, НастройкиКомпонента, Истина);
КонецФункции

Функция ДобавитьОписаниеГруппы(МассивОписаний, ИмяКомпонента, НастройкиКОмпонента) Экспорт
	А1Э_Формы.ДобавитьОписаниеГоризонтальнойГруппы(
	МассивОписаний,
	ИмяКомпонента + "___Группа",
	"",
	А1Э_Структуры.ЗначениеСвойства(НастройкиКомпонента, "РодительЭлемента"),
	А1Э_Структуры.ЗначениеСвойства(НастройкиКомпонента, "ПередЭлементом"),
	А1Э_Структуры.Создать(
	"ОтображатьЗаголовок", Ложь,
	"Отображение", ОтображениеОбычнойГруппы.Нет,
	"ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр,
	"ГоризонтальноеПоложениеПодчиненных", ГоризонтальноеПоложениеЭлемента.Центр
	)
	);
КонецФункции

Функция ДобавитьHTMLполе(МассивОписаний, ИмяКомпонента, НастройкиКомпонента, БезГруппы = Ложь) Экспорт
	А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(
	МассивОписаний,
	ИмяКомпонента + "___ПолеШкалы",
	"Строка",
	"",
	"_",
	?(БезГруппы, А1Э_Структуры.ЗначениеСвойства(НастройкиКомпонента, "РодительЭлемента"), ИмяКомпонента + "___Группа"),
	?(БезГруппы, А1Э_Структуры.ЗначениеСвойства(НастройкиКомпонента, "ПередЭлементом"), null),
	А1Э_Структуры.Создать(
	"Вид", ВидПоляФормы.ПолеHTMLДокумента,
	"ЗначениеРеквизита", DIV_HTML(НастройкиКомпонента),
	"ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет,
	"ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр,
	"РастягиватьПоГоризонтали", Ложь,
	"РастягиватьПоВертикали", Ложь,
	"Ширина", 24,
	"Высота", 1,
	"АвтоМаксимальнаяШирина", Истина,
	"АвтоМаксимальнаяВысота", Ложь,
	"ЦветРамки", WebЦвета.Белый,
	)
	);
КонецФункции

Функция ОбновитьШкалу(Форма, ИмяКомпонента, Заполнение = Неопределено) Экспорт
	НастройкиКомпонента = А1Э_Общее.ЗначениеСвойства(Форма, ИмяКомпонента + "___Настройки");
	Если НЕ Заполнение = Неопределено Тогда
		НастройкиКомпонента.Заполнение = Заполнение;
	КонецЕсли;
	ИмяРеквизита = ИмяКомпонента + "___ПолеШкалы";
	Если А1Э_Структуры.ЗначениеСвойства(НастройкиКомпонента, "ФункцияТекста") = Неопределено Тогда
		Форма[ИмяРеквизита] = DIV_HTML(НастройкиКомпонента);
	Иначе
		Форма[ИмяРеквизита] = А1Э_Общее.РезультатФункции(НастройкиКомпонента.ФункцияТекста, Заполнение);
	КонецЕсли;
КонецФункции

#Область НастройкиПараметров
Функция НастройкиПараметров() Экспорт
	Возврат А1Э_Структуры.Создать(
	"ПоУмолчанию", ЗначенияПоУмолчанию(),
	"Дополнительные", ДополнительныеПараметры()
	);
КонецФункции

Функция ДополнительныеПараметры() Экспорт
	Возврат А1Э_Массивы.Создать(
	"РодительЭлемента",
	"ПередЭлементом",
	"ФункцияТекста",
	"Выражение"
	);
КонецФункции

Функция ЗначенияПоУмолчанию() Экспорт
	Возврат А1Э_Структуры.Создать(
	"ЧислоШагов", 0,
	"Ширина", 28,
	"Высота", 1,
	"ШиринаГраницы", 2,
	"Цвет",         А1Э_Массивы.Создать(0, 220, 80),
	"ЦветГраницы",  А1Э_Массивы.Создать(70, 70, 70),
	"ЦветВторой",   А1Э_Массивы.Создать(255, 255, 255),
	"ЦветТретий",   А1Э_Массивы.Создать(200, 200, 200),
	"ЦветАктивный", А1Э_Массивы.Создать(255, 255, 15),
	"Заполнение", 0,
	);
КонецФункции
#КонецОбласти

#Область Общее

#Область HTML
Функция HTMLobject(Имя, Параметры, ОсобыеПоля = Неопределено) Экспорт
	Строка = "<" + Имя + " ";
	Для Каждого Параметр Из Параметры Цикл
		Строка = Строка + Параметр.Ключ + "=""";
		Если 
			ОсобыеПоля = Неопределено ИЛИ
			НЕ А1Э_Общее.Свойство(ОсобыеПоля, Параметр.Ключ)
			Тогда
			Если ТипЗнч(Параметр.Значение) = Тип("Число") Тогда
				Строка = Строка + СделатьЧислоНормально(Параметр.Значение);
			Иначе
				Строка = Строка + Параметр.Значение;
			КонецЕсли;
		Иначе
			Строка = Строка + А1Э_Общее.РезультатФункции(
			ОсобыеПоля[Параметр.Ключ], 
			Параметр.Значение
			);
		КонецЕсли;
		Строка = Строка + """ ";
	КонецЦикла;
	Строка = Строка + "/>
	|";
	Возврат Строка;
КонецФункции

Функция RGBcolor(Цвет) Экспорт
	Возврат "rgb(" + 
	СделатьЧислоНормально(Цвет[0]) + "," + 
	СделатьЧислоНормально(Цвет[1]) + "," + 
	СделатьЧислоНормально(Цвет[2]) + ")";
КонецФункции
#КонецОбласти

#Область HTML_SVG
Функция Style(ПараметрыСтиля) Экспорт
	ИнвалиднаяКоляска = ИнвалиднаяКоляска();
	Строка = "";
	НуженРазделитель = Ложь;
	Для Каждого Параметр Из ПараметрыСтиля Цикл
		Свойство = ?(
		Лев(Параметр.Ключ, 1) = "_", 
		А1Э_Структуры.ЗначениеСвойства(ИнвалиднаяКоляска, Параметр.Ключ), 
		Параметр.Ключ
		);
		Строка = Строка + 
		?(НуженРазделитель, ";", "") + 
		Свойство + 
		":" + 
		?(
		ТипЗнч(Параметр.Значение) = Тип("Число"), 
		СделатьЧислоНормально(Параметр.Значение), 
		Параметр.Значение
		);
		НуженРазделитель = Истина;
	КонецЦикла;
	Строка = Строка + "";
	Возврат Строка;
КонецФункции

Функция Shape_(Имя, Параметры) Экспорт
	ИнвалиднаяКоляска = ИнвалиднаяКоляска();
	Строка = "<" + Имя + " ";
	Для Каждого Параметр Из Параметры Цикл
		Свойство = ?(
		Лев(Параметр.Ключ, 1) = "_", 
		А1Э_Структуры.ЗначениеСвойства(ИнвалиднаяКоляска, Параметр.Ключ), 
		Параметр.Ключ
		);
		Строка = Строка + Свойство + "=";
		Если НЕ НРег(Свойство) = "style" Тогда
			Строка = Строка + 
			"""" + 
			?(
			ТипЗнч(Параметр.Значение) = Тип("Число"), 
			СделатьЧислоНормально(Параметр.Значение), 
			Параметр.Значение
			) + 
			""" ";
		Иначе
			Строка = Строка + Style(Параметр.Значение) + " ";
		КонецЕсли;
	КонецЦикла;
	Строка = Строка + "/>
	|";
	Возврат Строка;
КонецФункции

Функция Shape(Имя, Параметры) Экспорт
	ОсобыеПоля = А1Э_Структуры.Создать(
		"style", ИмяМодуля() + ".Style"
	);
	Возврат HTMLobject(Имя, Параметры, ОсобыеПоля);
КонецФункции


Функция HTMLSVGbody(СтрокиФигур) Экспорт
	Результат = "<body>
	|<svg>
	|";
	Для Каждого Строка Из СтрокиФигур Цикл
		Результат = Результат + Строка;
	КонецЦикла;
	Результат = Результат + "</svg>
	|</body>
	|";
	Возврат Результат;
КонецФункции

Функция ПолосаПрогресса(Параметры) Экспорт
	Заполнение = Параметры.Заполнение;
	ПараметрыЗаднейПолосы = А1Э_Структуры.Создать(
	"width", Параметры.Ширина,
	"height", Параметры.Высота,
	"style", А1Э_Структуры.Создать(
	"fill", RGBcolor(Параметры.ЦветВторой),
	"_strokeWidth", Параметры.ШиринаГраницы,
	"stroke", RGBcolor(Параметры.ЦветГраницы)
	)
	);
	ПараметрыПереднейПолосы = А1Э_Структуры.Создать(
	"width", Параметры.Ширина * Заполнение,
	"height", Параметры.Высота,
	"style", А1Э_Структуры.Создать(
	"fill", RGBcolor(Параметры.Цвет)
	)
	);
	Возврат Shape("rect", ПараметрыЗаднейПолосы) + Shape("rect", ПараметрыПереднейПолосы);
КонецФункции

Функция ПолосаПрогресса2(Параметры) Экспорт
	Заполнение = Параметры.Заполнение;
	Ширина = Параметры.Ширина * 10 - 2;
	Высота = Параметры.Высота * 18 - 2;
	ПараметрыЗаднейПолосы = А1Э_Структуры.Создать(
	"width", Ширина,
	"height", Высота,
	"style", А1Э_Структуры.Создать(
	"fill", RGBcolor(Параметры.ЦветГраницы),
	)
	);
	ПараметрыСреднейПолосы = А1Э_Структуры.Создать(
	"x", Параметры.ШиринаГраницы,
	"y", Параметры.ШиринаГраницы,
	"width", Ширина - 2 * Параметры.ШиринаГраницы,
	"height", Высота - 2 * Параметры.ШиринаГраницы,
	"style", А1Э_Структуры.Создать(
	"fill", RGBcolor(Параметры.ЦветВторой),
	)
	);
	ПараметрыПереднейПолосы = А1Э_Структуры.Создать(
	"x", Параметры.ШиринаГраницы,
	"y", Параметры.ШиринаГраницы,
	"width", (Ширина - 2 * Параметры.ШиринаГраницы) * Заполнение,
	"height", Высота - 2 * Параметры.ШиринаГраницы,
	"style", А1Э_Структуры.Создать(
	"fill", RGBcolor(Параметры.Цвет),
	)
	);
	Возврат
	Shape("rect", ПараметрыЗаднейПолосы) +
	Shape("rect", ПараметрыСреднейПолосы) +
	Shape("rect", ПараметрыПереднейПолосы);
КонецФункции

Функция ДискретнаяШкалаПрогресса(Параметры) Экспорт
	Заполнение = Параметры.Заполнение;
	ЧислоШагов = Параметры.ЧислоШагов;
	Ширина = Параметры.Ширина * 10 - 2;
	Высота = Параметры.Высота * 18 - 2;
	ШиринаГраницы = Параметры.ШиринаГраницы;
	АШирина = Ширина - 2 * ШиринаГраницы;
	АВысота = Высота - 2 * ШиринаГраницы;
	ШиринаШага = (АШирина - (ЧислоШагов - 1) * ШиринаГраницы) / ЧислоШагов;
	ТекущийШаг = Окр(Заполнение * ЧислоШагов, 0);
	// Задний план
	МассивПолос = Новый Массив;
	МассивПолос.Добавить(
	А1Э_Структуры.Создать(
	"width", Ширина,
	"height", Высота,
	"style", А1Э_Структуры.Создать(
	"fill", RGBcolor(Параметры.ЦветГраницы),
	)
	)
	);
	МассивПолос.Добавить(
	А1Э_Структуры.Создать(
	"x", ШиринаГраницы,
	"y", ШиринаГраницы,
	"width", АШирина,
	"height", АВысота,
	"style", А1Э_Структуры.Создать(
	"fill", RGBcolor(Параметры.ЦветТретий),
	)
	)
	);
	МассивПолос.Добавить(
	А1Э_Структуры.Создать(
	"x", ШиринаГраницы,
	"y", ШиринаГраницы,
	"width", ТекущийШаг * (ШиринаШага + ШиринаГраницы) - ШиринаГраницы,
	"height", АВысота,
	"style", А1Э_Структуры.Создать(
	"fill", RGBcolor(Параметры.ЦветАктивный),
	)
	)
	);
	МассивПолос.Добавить(
	А1Э_Структуры.Создать(
	"x", ШиринаГраницы,
	"y", ШиринаГраницы,
	"width", ?(ТекущийШаг > 0, (ТекущийШаг - 1) * (ШиринаШага + ШиринаГраницы) - ШиринаГраницы, 0),
	"height", АВысота,
	"style", А1Э_Структуры.Создать(
	"fill", RGBcolor(Параметры.Цвет),
	)
	)
	);
	Если ШиринаГраницы > 0 Тогда
		Для Шаг = 1 По ЧислоШагов - 1 Цикл
			МассивПолос.Добавить(
			А1Э_Структуры.Создать(
			"x", Шаг * (ШиринаШага + ШиринаГраницы) - ШиринаГраницы,
			"y", 0,
			"width", ШиринаГраницы,
			"height", Высота,
			"style", А1Э_Структуры.Создать(
			"fill", RGBcolor(Параметры.ЦветГраницы)
			)
			)
			);
		КонецЦикла;
	КонецЕсли;
	Результат = "";
	Для Каждого Полоса Из МассивПолос Цикл
		Результат = Результат + Shape("rect", Полоса);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ИнвалиднаяКоляска() Экспорт
	Возврат А1Э_Структуры.Создать(
	"_strokeWidth", "stroke-width"
	);
КонецФункции

Функция ТекстHTMLSVG(НастройкиКомпонента)
	СтрокиФигур = А1Э_Массивы.Создать(
	?(НастройкиКомпонента.ЧислоШагов = 0,
	ПолосаПрогресса2(НастройкиКомпонента),
	ДискретнаяШкалаПрогресса(НастройкиКомпонента)
	)
	);
	Возврат "<html><style>
	|html, body { overflow: hidden;
	|margin-left: 0; margin-top: 0; margin-right: 0; padding: 0;}
	|</style>
	|" + HTMLSVGBody(СтрокиФигур) + "</html>";
КонецФункции
#КонецОбласти

#Область HTML_DIV
Функция DIV_StyleBlock(Параметры) Экспорт
	ШиринаГраницы = СделатьЧислоНормально(Параметры.ШиринаГраницы);
	ПолШирины     = СделатьЧислоНормально(Параметры.ШиринаГраницы / 2);
	Заполнение    = СделатьЧислоНормально(Параметры.Заполнение * 100);
	ЧислоШагов    = Параметры.ЧислоШагов;
	
	// dn, ac <= ia <= bg
	
	Результат = "<style>
	|html, body {
	|overflow: hidden;
	|margin: 0;
	|}
	|div.bg {
	|position: absolute;
	|background-color: " + RGBcolor(Параметры.ЦветГраницы) + ";
	|top: 0px;
	|left: 0px;
	|width: 100%;
	|height: 100%;
	|}
	|div.ia {
	|position: absolute;
	|background-color: " + RGBcolor(Параметры.ЦветВторой) + ";
	|top: " +    ШиринаГраницы * 10 + "%;
	|bottom: " + ШиринаГраницы * 10 + "%;
	|left: " +       ПолШирины + "%;
	|right: " +      ПолШирины + "%;
	|}";
	
	Если ЧислоШагов > 0 Тогда
		Результат = Результат + 
		"
		|div.ac {
		|position: absolute;
		|background-color: " + RGBcolor(Параметры.ЦветАктивный) + ";
		|top: 0;
		|bottom: 0;
		|left: 0;
		|width: " + Заполнение + "%;
		|}";
		Заполнение = СделатьЧислоНормально(Параметры.Заполнение * 100 - 100 / ЧислоШагов);
	КонецЕсли;
	
	Результат = Результат +
	"
	|div.dn {
	|position: absolute;
	|background-color: " + RGBcolor(Параметры.Цвет) + ";
	|top: 0;
	|bottom: 0;
	|left: 0;
	|width: " + Заполнение + "%;
	|}";
	
	Если ЧислоШагов > 0 Тогда
		Результат = Результат + 
		"
		|div.br {
		|position: absolute;
		|background-color: " + RGBcolor(Параметры.ЦветГраницы) + "; 
		|width: " + ШиринаГраницы + "%; 
		|height: 100%;
		|}";
	КонецЕсли;
	
	Результат = Результат + "
	|</style>";
	
	Возврат Результат;
КонецФункции

Функция DIV_BodyBlock(Параметры) Экспорт
	Результат = "
	|<body>
	|<div style=""position: absolute; left:0; top: 3%; height: 96%; width: 100%"">
	|<div class=""bg"">
	|<div class=""ia"">";
	Если Параметры.ЧислоШагов > 0 Тогда
		Результат = Результат + "
		|<div class=""ac""></div>";
	КонецЕсли;
	Результат = Результат + "
	|<div class=""dn""></div>
	|</div>";
	
	Если Параметры.ЧислоШагов > 0 Тогда
		ШиринаШага = (100 - Параметры.ШиринаГраницы) / Параметры.ЧислоШагов;
		Для Индекс = 0 По Параметры.ЧислоШагов Цикл
			Позиция = СделатьЧислоНормально(ШиринаШага * Индекс);
			Результат = Результат + "
			|<div class=""br"" style=""left: " + Позиция + "%""></div>";
		КонецЦикла;
	КонецЕсли;
	
	Результат = Результат + "
	|</div>
	|</div>
	|</body>";
	
	Возврат Результат;
КонецФункции

Функция DIV_HTML(Параметры) Экспорт
	Возврат "<html>" +
	DIV_StyleBlock(Параметры) +
	DIV_BodyBlock(Параметры)  +
	"
	|</html>";
КонецФункции
#КонецОбласти

Функция СделатьЧислоНормально(Число) Экспорт
	Строка = Строка(Число);
	Если СтрНайти(Строка, ",") = 0 Тогда
		Возврат Строка;
	КонецЕсли;
	Части = А1Э_Строки.ПередПосле(Строка, ",");
	Возврат Части.Перед + "." + Лев(Части.После, 4);
КонецФункции

Функция ИмяМодуля() Экспорт
	Возврат "А1БК_ШкалаПрогресса";
КонецФункции

#КонецОбласти

