#Если НЕ Клиент Тогда
	
	// Описывает таблицу формы, в которую загружаются данные некоторого объекта метаданных, которые можно прямо в таблице редактировать.
	// В данный момент поддерживает только регистры сведений.
	//
	// Параметры:
	//  МассивОписаний	 - Массив - Массив описаний, в который будет добавлено описание. 
	//  ИмяКомпонента	 - Строка - Имя таблицы на форме и префикс всех подчиненных элементов
	//  МетаданныеОбъекта - Строка, ОбъектМетаданных - Идентификатор объекта метаданныъ, с которым будет связана таблица.
	//  РодительЭлемента - Строка, ЭлементФормы - 
	//  ПередЭлементом	 - Строка, ЭлементФормы - 
	//  Параметры		 - Структура - поддерживает стандартные свойства таблицы формы и специальные свойства:
	//		ПередСохранением - Строка - имя экспортной функции, которая будет выполнена перед сохранением данных. Функция получает 3 параметра - Форма, ИмяКомпонента и Отказ. Если отказ будет установлен в Истина, сохранение не будет выполнено.
	//		Ключи - основные отборы, которые будут применены по умолчанию. Используется для чего-то вроде табличных частей.
	//		Отборы - Массив - имена колонок, для которых создаются отборы. Отборы выводятся пользователю на форму.
	//  Действия		 - Структура - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция ДобавитьОписание(МассивОписаний, ИмяКомпонента, Знач ИмяМетаданных, РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		ЧастиИмени = А1Э_Строки.ПередПосле(НРЕГ(ИмяМетаданных), ".");
		ТипМетаданных = ЧастиИмени.Перед;
		Если ТипМетаданных <> "регистрсведений" И ТипМетаданных <> "регистрнакопления" Тогда
			А1Э_Служебный.СлужебноеИсключение("РедактируемаяТаблицаДанных: в текущей версии поддерживаются только регистры сведений и регистры накопления!");
		КонецЕсли;
		НастройкиКомпонента = А1Э_Структуры.Создать(
		"ТипМетаданных", ТипМетаданных,
		"ИмяМетаданных", ИмяМетаданных,
		"ПередСохранением", А1Э_Структуры.ЗначениеСвойства(Параметры, "ПередСохранением"),
		"Ключи", А1Э_Структуры.Структура(А1Э_Иерархии.ЗначениеСвойства(Параметры, "Ключи")),
		"Отборы", А1Э_Массивы.Массив(А1Э_Структуры.ЗначениеСвойства(Параметры, "Отборы")),
		"Колонки", Новый Массив,
		"УдаленныеСтроки", Новый Массив,
		"ТекстЗапроса", А1Э_Структуры.ЗначениеСвойства(Параметры, "ТекстЗапроса"),
		);
		Если ТипМетаданных = "регистрнакопления" Тогда
			РегистраторКакКлюч = НастройкиКомпонента.Ключи.Свойство("Регистратор");
			Если НЕ РегистраторКакКлюч Тогда
				А1Э_Служебный.СлужебноеИсключение("РедактируемаяТаблицаДанных: для регистра накопления регистратор должен быть ключом!");
			КонецЕсли;
		КонецЕсли;
		
		Колонки = Новый Массив;
		Если ТипМетаданных = "регистрнакопления" Тогда
			ДобавитьКолонку(Колонки, НастройкиКомпонента, А1Э_Структуры.Создать(
			"Имя", "НомерСтроки",
			"Тип", "Число:6",
			"Заголовок", "N",
			"ЭтоИзмерение", Истина,
			));
			ДобавитьКолонку(Колонки, НастройкиКомпонента, А1Э_Структуры.Создать(
			"Имя", "Период",
			"Тип", "Дата",
			"Заголовок", "Период",
			"ЭтоИзмерение", Ложь,
			));
		КонецЕсли;
		Для Каждого КолонкаРегистра Из АктуальныеКолонкиРегистра(НастройкиКомпонента) Цикл
			ДобавитьКолонку(Колонки, НастройкиКомпонента, КолонкаРегистра);
		КонецЦикла;
		Если А1Э_Структуры.Свойство(Параметры, "ДополнительныеКолонки") Тогда
			Для Каждого ДополнительнаяКолонка Из Параметры.ДополнительныеКолонки Цикл
				ДобавитьКолонку(Колонки, НастройкиКомпонента, ДополнительнаяКолонка); 
			КонецЦикла;
		КонецЕсли;
		
		РабочиеДействия = А1Э_Структуры.Скопировать(Действия);
		А1Э_УниверсальнаяФорма.ДобавитьОбработчикМодуляКДействиям(РабочиеДействия, ИмяМодуля(), "ФормаПриСозданииНаСервере", 0);
		А1Э_УниверсальнаяФорма.ДобавитьОбработчикМодуляКДействиям(РабочиеДействия, ИмяМодуля(), "ПередУдалением");
		А1Э_УниверсальнаяФорма.ДобавитьОбработчикМодуляКДействиям(РабочиеДействия, ИмяМодуля(), "ФормаПередЗакрытием");
		
		А1Э_УниверсальнаяФорма.ДобавитьОписаниеНастроекКомпонента(МассивОписаний, ИмяКомпонента, НастройкиКомпонента);
		
		Если НастройкиКомпонента.Отборы.Количество() > 0 Тогда
			А1Э_Формы.ДобавитьОписаниеГоризонтальнойГруппы(МассивОписаний, ИмяКомпонента + "___Отборы", , РодительЭлемента);
			Для Каждого Отбор Из НастройкиКомпонента.Отборы Цикл
				Колонка = А1Э_ТаблицыЗначений.НайтиСтроку(НастройкиКомпонента.Колонки, "Имя", Отбор);
				А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, ИмяПоляОтбора(ИмяКомпонента, Отбор), Колонка.Тип, , Колонка.Заголовок, ИмяКомпонента + "___Отборы", , ,
				А1Э_Структуры.Создать(
				"ПриИзменении", ИмяМодуля() + ".КомандаСохранитьДанные:НаСервере",
				));
			КонецЦикла;
		КонецЕсли;
		ОсновноеОписание = А1Э_Формы.ДобавитьОписаниеТаблицыФормы(МассивОписаний, ИмяКомпонента, Колонки, , РодительЭлемента, ПередЭлементом, Параметры, РабочиеДействия);
		А1Э_Формы.ДобавитьОписаниеКомандыИКнопки(МассивОписаний, ИмяКомпонента + "___Сохранить", ИмяМодуля() + ".КомандаСохранитьДанные:НаСервере", , "Сохранить", ИмяКомпонента);
		А1Э_Формы.ДобавитьОписаниеКомандыИКнопки(МассивОписаний, ИмяКомпонента + "___ОтменитьИзменения", ИмяМодуля() + ".КомандаОбновитьДанныеБезСохранения:НаСервере", , "Отменить изменения", ИмяКомпонента);
		
		Возврат ОсновноеОписание;
	КонецФункции
	
	Функция ЗагрузитьДанные(Форма, ИмяКомпонента) Экспорт 
		НастройкиКомпонента = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = НастройкиКомпонента.ТекстЗапроса;
		Если НЕ ЗначениеЗаполнено(Запрос.Текст) Тогда 
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ &ИмяТаблицы КАК Таблица ГДЕ &Отборы";
			А1Э_Строки.Подставить(Запрос.Текст, "&ИмяТаблицы", НастройкиКомпонента.ИмяМетаданных);
		КонецЕсли;
		Если СтрНайти(Запрос.Текст, "&Отборы") = 0 Тогда
			А1Э_Служебный.СлужебноеИсключение("В тексте запросе компонента РедактируемаяТаблицаМетаданных должна быть строка <&Отборы> (для подстановки служебных отборов)!");
		КонецЕсли;
		Отборы = "ИСТИНА";
		Сч = 0;
		Для Каждого Пара Из НастройкиКомпонента.Ключи Цикл
			Сч = Сч + 1;
			Отборы = Отборы + Символы.ПС + "И Таблица." + Пара.Ключ + " = &Параметр" + Сч;
			Запрос.УстановитьПараметр("Параметр" + Сч, Пара.Значение);
		КонецЦикла;
		Для Каждого Отбор Из НастройкиКомпонента.Отборы Цикл
			Если НЕ ЗначениеЗаполнено(Форма[ИмяПоляОтбора(ИмяКомпонента, Отбор)]) Тогда Продолжить; КонецЕсли;
			Сч = Сч + 1;
			Отборы = Отборы + Символы.ПС + "И Таблица." + Отбор + " = &Параметр" + Сч;
			Запрос.УстановитьПараметр("Параметр" + Сч, Форма[ИмяПоляОтбора(ИмяКомпонента, Отбор)]);
		КонецЦикла;
		
		А1Э_Строки.Подставить(Запрос.Текст, "&Отборы", Отборы);
		Форма[ИмяКомпонента].Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для Каждого Строка Из Форма[ИмяКомпонента] Цикл
			Для Каждого Колонка Из НастройкиКомпонента.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				Строка[ИмяКолонкиИсходногоЗначения(ИмяКолонки)] = Строка[ИмяКолонки];
			КонецЦикла;
		КонецЦикла;
		
	КонецФункции
	
	Функция СохранитьДанные(Форма, ИмяКомпонента) Экспорт
		НастройкиКомпонента = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
		Если ЗначениеЗаполнено(НастройкиКомпонента.ПередСохранением) Тогда
			Отказ = Ложь;
			А1Э_Общее.РезультатФункции(НастройкиКомпонента.ПередСохранением, Форма, ИмяКомпонента, Отказ);
			Если Отказ = Истина Тогда Возврат Истина; КонецЕсли;
		КонецЕсли;
		
		КоллекцияДанныхДляСохранения = КоллекцияДанныхДляСохранения(Форма, ИмяКомпонента);
		Результат = СохранитьКоллекцию(КоллекцияДанныхДляСохранения, НастройкиКомпонента);
		Если Результат = Ложь Тогда
			Сообщить("Не удалось сохранить данные!");
		Иначе
			Для Каждого Строка Из Результат.ИзмененныеСтроки Цикл	
				СтрокаКомпонента = Форма[ИмяКомпонента][Строка.А1__Индекс];
				ЗаполнитьЗначенияСвойств(СтрокаКомпонента, Строка);
				Для Каждого Колонка Из НастройкиКомпонента.Колонки Цикл
					СтрокаКомпонента[Колонка.ИмяИсходногоЗначения] = СтрокаКомпонента[Колонка.Имя];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		
	КонецФункции
	
	Функция ОбновитьДанные(Форма, ИмяКомпонента) Экспорт 
		СохранитьДанные(Форма, ИмяКомпонента);
		ЗагрузитьДанные(Форма, ИмяКомпонента);
	КонецФункции
	
#КонецЕсли

#Область События
#Если НЕ Клиент Тогда
	
	Функция ФормаПриСозданииНаСервере(ИмяКомпонента, Форма, Отказ, СтандартнаяОбработка) Экспорт
		ЗагрузитьДанные(Форма, ИмяКомпонента);
	КонецФункции
	
#КонецЕсли

#Если Клиент Тогда
	
	Функция ФормаПередЗакрытием(ИмяКомпонента, Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
		
		КоллекцияДанныхДляСохранения = КоллекцияДанныхДляСохранения(Форма, ИмяКомпонента);
		Если КоллекцияДанныхДляСохранения.ИзмененныеСтроки.Количество() = 0 И 
			КоллекцияДанныхДляСохранения.УдаленныеСтроки.Количество() = 0 Тогда Возврат Неопределено КонецЕсли; 
		
		Если ЗавершениеРаботы = Истина Тогда
			ТекстПредупреждения = "Не сохраненные изменения будут потеряны! Рекомендуем сохранить данные перед завершением работы!";
			Возврат Неопределено;
		КонецЕсли;
		
		Настройки = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
		Попытка
			А1Э_ОбщееСервер.РезультатФункции(ИмяМодуля() + ".СохранитьКоллекцию", КоллекцияДанныхДляСохранения, Настройки);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить("Не удалось сохранить изменения по причине: " + ОписаниеОшибки);
			Отказ = Истина;
		КонецПопытки;
	КонецФункции 
	
	Функция ПередУдалением(Форма, Элемент, Отказ) Экспорт 
		ИмяКомпонента = Элемент.Имя;
		НастройкиКомпонента = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
		НастройкиКомпонента.УдаленныеСтроки.Добавить(ДанныеСтрокиДляУдаления(Элемент.ТекущиеДанные, НастройкиКомпонента.Колонки));
	КонецФункции 
	
#КонецЕсли
#КонецОбласти

#Область Команды
#Если НЕ Клиент Тогда
	
	Функция КомандаСохранитьДанные(Форма, ИмяКоманды) Экспорт  
		ИмяКомпонента = А1Э_УниверсальнаяФорма.ИмяКомпонента(ИмяКоманды);
		Отказ = СохранитьДанные(Форма, ИмяКомпонента);
		Если Отказ = Истина Тогда Возврат Неопределено; КонецЕсли;
		ЗагрузитьДанные(Форма, ИмяКомпонента); 
	КонецФункции
	
	Функция КомандаОбновитьДанныеБезСохранения(Форма, ИмяКоманды) Экспорт 
		ИмяКомпонента = А1Э_УниверсальнаяФорма.ИмяКомпонента(ИмяКоманды);
		ЗагрузитьДанные(Форма, ИмяКомпонента);
	КонецФункции 
	
#КонецЕсли
#КонецОбласти 

#Область Служебно
#Если НЕ Клиент Тогда
	
	Функция СохранитьКоллекцию(КоллекцияДанных, НастройкиКомпонента) Экспорт
		Если НастройкиКомпонента.ТипМетаданных = "регистрсведений" Тогда
			НачатьТранзакцию();
			Попытка
				Менеджер = А1Э_Метаданные.МенеджерОбъекта(НастройкиКомпонента.ИмяМетаданных);
				Для Каждого Строка Из КоллекцияДанных.УдаленныеСтроки Цикл
					МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НастройкиКомпонента.Ключи);
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				Для Каждого Строка Из КоллекцияДанных.ИзмененныеСтроки Цикл
					МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НастройкиКомпонента.Ключи);
					МенеджерЗаписи.Записать(Истина);
					ЗаполнитьЗначенияСвойств(Строка, МенеджерЗаписи);
				КонецЦикла;
				ЗафиксироватьТранзакцию();
				Возврат КоллекцияДанных;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
		ИначеЕсли НастройкиКомпонента.ТипМетаданных = "регистрнакопления" Тогда 
			НачатьТранзакцию();
			Попытка
				Менеджер = А1Э_Метаданные.МенеджерОбъекта(НастройкиКомпонента.ИмяМетаданных);
				НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(НастройкиКомпонента.Ключи.Регистратор);
				НаборЗаписей.Прочитать();
				СтрокиКДобавлению = Новый Массив;
				Для Каждого Строка Из КоллекцияДанных.ИзмененныеСтроки Цикл
					Если НЕ ЗначениеЗаполнено(Строка.НомерСтроки) Тогда
						СтрокиКДобавлению.Добавить(Строка);
						Продолжить;
					КонецЕсли;
					СтрокаНабораЗаписей = НаборЗаписей[Строка.НомерСтроки - 1];
					ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, Строка);
					ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, НастройкиКомпонента.Ключи); 
				КонецЦикла;
				
				НомераСтрокаКУдалению = Новый Массив;
				Для Каждого Строка Из КоллекцияДанных.УдаленныеСтроки Цикл
					Если НЕ ЗначениеЗаполнено(Строка.НомерСтроки) Тогда Продолжить; КонецЕсли;
					НомераСтрокаКУдалению.Добавить(Строка.НомерСтроки);
				КонецЦикла;
				А1Э_Массивы.Сортировать(НомераСтрокаКУдалению, "Убыв");
				Для Каждого НомерСтроки Из НомераСтрокаКУдалению Цикл
					НаборЗаписей.Удалить(НомерСтроки - 1);
				КонецЦикла;
				
				Для Каждого Строка Из СтрокиКДобавлению Цикл
					СтрокаНабораЗаписей = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, Строка);
					ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, НастройкиКомпонента.Ключи);
				КонецЦикла;
				НаборЗаписей.Записать();
				ЗафиксироватьТранзакцию();
				//ТУДУ - реализовать возврат измененных строк.
				Возврат КоллекцияДанных;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецФункции 
	
	Функция ДобавитьКолонку(Колонки, НастройкиКомпонента, ИсточникДанных) 
		Если ИсточникДанных.Свойство("Метаданные") Тогда
			ДанныеДляОписания = ИсточникДанных.Метаданные;
		Иначе
			ДанныеДляОписания = ИсточникДанных;
		КонецЕсли;
		
		ОписаниеКолонки = ОписаниеКолонки(ДанныеДляОписания);
		Колонки.Добавить(ОписаниеКолонки);
		Колонки.Добавить(ОписаниеКолонкиИсходныхЗначений(ДанныеДляОписания));
		НастройкиКомпонента.Колонки.Добавить(А1Э_Структуры.Создать(
		"Имя", ОписаниеКолонки.Имя,
		"Тип", ОписаниеКолонки.Тип,
		"Заголовок", ОписаниеКолонки.Заголовок,
		"ИмяИсходногоЗначения", ИмяКолонкиИсходногоЗначения(ОписаниеКолонки.Имя),
		"ЭтоИзмерение", А1Э_Структуры.ЗначениеСвойства(ИсточникДанных, "ЭтоИзмерение", Ложь),
		));
	КонецФункции
	
	Функция ОписаниеКолонки(ИсточникДанных)
		Если ТипЗнч(ИсточникДанных) = Тип("ОбъектМетаданных") Тогда
			ПараметрыКолонки = А1Э_Структуры.Создать(
			"ПараметрыВыбора", ИсточникДанных.ПараметрыВыбора,
			"СвязиПараметровВыбора", ИсточникДанных.СвязиПараметровВыбора);
			
			Возврат А1Э_Структуры.Создать(
			"Имя", ИсточникДанных.Имя,
			"Тип", ИсточникДанных.Тип,
			"Заголовок", ИсточникДанных.Синоним,
			"Параметры", ПараметрыКолонки);
		Иначе
			Возврат А1Э_Формы.ДанныеКолонкиТаблицыФормы(ИсточникДанных);
		КонецЕсли;
		
	КонецФункции 
	
	Функция ОписаниеКолонкиИсходныхЗначений(ИсточникДанных)
		ОписаниеКолонки = ОписаниеКолонки(ИсточникДанных);
		ОписаниеКолонки.Имя = ИмяКолонкиИсходногоЗначения(ОписаниеКолонки.Имя);
		ОписаниеКолонки.Параметры.Вставить("Видимость", Ложь);
		Возврат ОписаниеКолонки;
	КонецФункции
	
	Функция АктуальныеКолонкиРегистра(НастройкиКомпонента) 
		МетаданныеОбъекта = А1Э_Метаданные.ОбъектМетаданных(НастройкиКомпонента.ИмяМетаданных);
		АктуальныеКолонки = Новый Массив;
		Для Каждого Колонка Из МетаданныеОбъекта.Измерения Цикл
			Если НастройкиКомпонента.Ключи.Свойство(Колонка.Имя) Тогда Продолжить; КонецЕсли;
			АктуальныеКолонки.Добавить(НовыйСтруктураКолонки(Колонка, Истина));
		КонецЦикла;
		
		ДобавитьКолонкиРесурсовРеквизитов(МетаданныеОбъекта.Ресурсы, АктуальныеКолонки, НастройкиКомпонента);
		ДобавитьКолонкиРесурсовРеквизитов(МетаданныеОбъекта.Реквизиты, АктуальныеКолонки, НастройкиКомпонента);
		
		Возврат АктуальныеКолонки;
	КонецФункции
	
	Функция ДобавитьКолонкиРесурсовРеквизитов(Коллекция, АктуальныеКолонки, НастройкиКомпонента) 
		Для Каждого Колонка Из Коллекция Цикл
			Если НастройкиКомпонента.Ключи.Свойство(Колонка.Имя) Тогда
				А1Э_Служебный.СлужебноеИсключение("Ключ редактируемой таблицы данных может быть только измерением!");
			КонецЕсли;
			АктуальныеКолонки.Добавить(НовыйСтруктураКолонки(Колонка, Ложь));
		КонецЦикла;
	КонецФункции
	
#КонецЕсли

Функция КоллекцияДанныхДляСохранения(Форма, ИмяКомпонента) 
	Настройки = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
	УдаленныеСтроки = Настройки.УдаленныеСтроки;
	Колонки = Настройки.Колонки;
	ИзмененныеСтроки = Новый Массив;
	Таблица = Форма[ИмяКомпонента]; 
	Для Сч = 0 По Таблица.Количество() - 1 Цикл
		Строка = Таблица[Сч];
		Если НЕ СтрокаИзменена(Строка, Колонки) Тогда Продолжить; КонецЕсли;
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("А1__Индекс", Сч);
		ИзмеренияИзменены = Ложь;
		Для Каждого Колонка Из Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
			Если НЕ Колонка.ЭтоИзмерение Тогда Продолжить; КонецЕсли;
			Если Строка[Колонка.Имя] <> Строка[Колонка.ИмяИсходногоЗначения] Тогда ИзмеренияИзменены = Истина; КонецЕсли;				
		КонецЦикла;
		ИзмененныеСтроки.Добавить(СтруктураСтроки);
		Если ИзмеренияИзменены Тогда 
			УдаленныеСтроки.Добавить(ДанныеСтрокиДляУдаления(Строка, Колонки));
		КонецЕсли;
	КонецЦикла;
	
	Возврат А1Э_Структуры.Создать(
	"ИзмененныеСтроки", ИзмененныеСтроки,
	"УдаленныеСтроки", УдаленныеСтроки,
	);
КонецФункции

Функция ДанныеСтрокиДляУдаления(Строка, Колонки)
	Результат = Новый Структура;
	Для Каждого Колонка Из Колонки Цикл
		Если НЕ Колонка.ЭтоИзмерение Тогда Продолжить; КонецЕсли;
		Результат.Вставить(Колонка.Имя, Строка[Колонка.ИмяИсходногоЗначения]); 
	КонецЦикла;
	Возврат Результат;	
КонецФункции 

Функция СтрокаИзменена(Строка, Колонки)
	Для Каждого Колонка Из Колонки Цикл
		Если Строка[Колонка.Имя] <> Строка[Колонка.ИмяИсходногоЗначения] Тогда Возврат Истина; КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ИзмененныеСтроки(Форма, ИмяКомпонента) 
	НастройкиКомпонента = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
	Результат = Новый Массив;
	Для Каждого Строка Из Форма[ИмяКомпонента] Цикл
		Для Каждого Колонка Из НастройкиКомпонента.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Если Строка[ИмяКолонки] <> Строка[ИмяКолонкиИсходногоЗначения(ИмяКолонки)] Тогда
				Результат.Добавить(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ИмяКолонкиИсходногоЗначения(ИмяКолонки)
	Возврат ИмяКолонки + "__ИсходноеЗначение";
КонецФункции

Функция НовыйСтруктураКолонки(Колонка, ЭтоИзмерение)
	Возврат А1Э_Структуры.Создать(
	"Метаданные", Колонка,
	"ЭтоИзмерение", ЭтоИзмерение
	);
КонецФункции 

Функция ИмяПоляОтбора(ИмяКомпонента, Отбор)
	Возврат ИмяКомпонента + "___Отбор" + Отбор;
КонецФункции

#КонецОбласти 

Функция ИмяМодуля() Экспорт
	Возврат "А1БК_РедактируемаяТаблицаДанных";
КонецФункции 

