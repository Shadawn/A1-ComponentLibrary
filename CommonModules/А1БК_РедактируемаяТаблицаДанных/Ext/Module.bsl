#Область ПрограммныйИнтерфейс

#Если НЕ Клиент Тогда
	
	// Описывает таблицу формы, в которую загружаются данные некоторого объекта метаданных, которые можно прямо в таблице редактировать.
	// В данный момент поддерживает только регистры сведений и регистры накопления.
	//
	// Параметры:
	//  МассивОписаний	 - Массив - Массив описаний, в который будет добавлено описание. 
	//  ИмяКомпонента	 - Строка - Имя таблицы на форме и префикс всех подчиненных элементов
	//  МетаданныеОбъекта - Строка, ОбъектМетаданных - Идентификатор объекта метаданныъ, с которым будет связана таблица.
	//  РодительЭлемента - Строка, ЭлементФормы - 
	//  ПередЭлементом	 - Строка, ЭлементФормы - 
	//  Параметры		 - Структура - поддерживает стандартные свойства таблицы формы и специальные свойства:
	//		ТекстЗапроса				 - Строка    - текст запроса данных. Если не задан, то будет сгенерирован автоматически по имени метаданных.
	//		Ключи 						 - Структура - основные отборы (ключ - имя реквизита, значение - значение отбора), которые будут применены без отображения в интерфейсе.
	//		Отборы 						 - Массив 	 - имена колонок, для которых создаются отборы. Отборы выводятся пользователю на форму.
	//		Контекст					 - Структура - произвольные данные, которые будут храниться в настройках компонента.
	//		НаборЗаписей			     - Булево    - (НЕСТАБИЛЬНО!) только для регистров сведений (регистры накопления всегда Истина). Определяет, будут ли записаны изменения в цикле менеджером записи или единым набором записей. По умолчанию Ложь (для обратной совместимости).
	//		Сортировка					 - Структура - сортировка данных. Ключи являются именами колонок, значение определяет направление сортировки (Истина - ВОЗР). Применимо только для автоматически генерируемого запроса.
	//		ДополнительныеКолонки		 - Массив<Строка,Структура> - показывает, какие колонки кроме существующих в регистре надо вывести. См. А1Э_Формы.ДанныеКолонкиТаблицыФормы().
	//  Действия		 - Структура - действия компонента. Помимо стандартных для объекта ТаблицаФормы и событий формы, открывает следующие:
	//		КомпонентПередИсходнойЗагрузкойДанных(ИмяКомпонента, Форма) - выполняется перед первой загрузкой данных.
	//		КомпонентПередСохранением(ИмяКомпонента, Форма, Отказ) - выполняется перед сохранением данных. Если Отказ = Истина, сохранение будет прервано.
	//      КомпонентПослеСохранения(ИмяКомпонента, Форма) - выполняется после сохранения данных. Если Отказ = Истина, сохранение будет прервано.
	// Возвращаемое значение:
	//   - 
	//
	Функция ДобавитьОписание(МассивОписаний, ИмяКомпонента, Знач ИмяМетаданных, РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		Если НЕ А1Э_Доступы.ЕстьПраво("Просмотр", ИмяМетаданных) Тогда Возврат Неопределено; КонецЕсли;
		ЧастиИмени = А1Э_Строки.ПередПосле(НРЕГ(ИмяМетаданных), ".");
		ТипМетаданных = ЧастиИмени.Перед;
		Если ТипМетаданных <> "регистрсведений" И ТипМетаданных <> "регистрнакопления" Тогда
			А1Э_Служебный.СлужебноеИсключение("А1БК_РедактируемаяТаблицаДанных: в текущей версии поддерживаются только регистры сведений и регистры накопления!");
		КонецЕсли;
		Если ТипМетаданных = "регистрсведений" Тогда
			ОбъектМетаданных = А1Э_Метаданные.ОбъектМетаданных(ИмяМетаданных);
			Если ОбъектМетаданных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
				А1Э_Служебный.СлужебноеИсключение("А1БК_РедактируемаяТаблицаДанных: в текущей версии не поддерживаются регистры сведений с периодичностью по регистратору");
			Иначе
				ПериодическийРегистрСведений = ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
			КонецЕсли;
		КонецЕсли;
		НастройкиКомпонента = А1Э_Структуры.Создать(
			"ТипМетаданных", ТипМетаданных,
			"ИмяМетаданных", ИмяМетаданных,
			"ПериодическийРегистрСведений", ПериодическийРегистрСведений, 
			"Ключи", А1Э_Структуры.Структура(А1Э_Иерархии.ЗначениеСвойства(Параметры, "Ключи")),
			"Отборы", А1Э_Массивы.Массив(А1Э_Структуры.ЗначениеСвойства(Параметры, "Отборы")),
			"Контекст", А1Э_Структуры.Структура(А1Э_Структуры.ЗначениеСвойства(Параметры, "Контекст")),
			"Колонки", Новый Массив,
			"УдаленныеСтроки", Новый Массив,
			"ТекстЗапроса", А1Э_Структуры.ЗначениеСвойства(Параметры, "ТекстЗапроса"),
			"НаборЗаписей", А1Э_Структуры.ЗначениеСвойства(Параметры, "НаборЗаписей", Истина),
			"Сортировка", А1Э_Структуры.ЗначениеСвойства(Параметры, "Сортировка"),
		);
		Если ТипМетаданных = "регистрнакопления" Тогда
			РегистраторКакКлюч = НастройкиКомпонента.Ключи.Свойство("Регистратор");
			Если НЕ РегистраторКакКлюч Тогда
				А1Э_Служебный.СлужебноеИсключение("А1БК_РедактируемаяТаблицаДанных: для регистра накопления регистратор должен быть ключом!");
			КонецЕсли;
		КонецЕсли;
		
		Колонки = Новый Массив;
		Если ТипМетаданных = "регистрнакопления" Тогда
			ДобавитьКолонку(Колонки, НастройкиКомпонента, А1Э_Структуры.Создать(
				"Имя", "НомерСтроки",
				"Тип", "Число:6",
				"Заголовок", "N",
				"ЭтоИзмерение", Истина,
			));
			ДобавитьКолонку(Колонки, НастройкиКомпонента, А1Э_Структуры.Создать(
				"Имя", "Период",
				"Тип", "Дата",
				"Заголовок", "Период",
				"ЭтоИзмерение", Ложь,
			));
		КонецЕсли;
		Для Каждого КолонкаРегистра Из АктуальныеКолонкиРегистра(НастройкиКомпонента) Цикл
			ДобавитьКолонку(Колонки, НастройкиКомпонента, КолонкаРегистра);
		КонецЦикла;
		Если А1Э_Структуры.Свойство(Параметры, "ДополнительныеКолонки") Тогда
			Для Каждого ДополнительнаяКолонка Из Параметры.ДополнительныеКолонки Цикл
				ДобавитьКолонку(Колонки, НастройкиКомпонента, ДополнительнаяКолонка); 
			КонецЦикла;
		КонецЕсли;
		ИзменениеРазрешено = А1Э_Доступы.ЕстьПраво("Изменение", ИмяМетаданных);
		РабочиеПараметры = А1Э_Структуры.СкопироватьВШаблонСЗаменой(Параметры,
		"ТолькоПросмотр", НЕ ИзменениеРазрешено,
		"ИзменятьСоставСтрок", НастройкиКомпонента.ПериодическийРегистрСведений <> Истина,
		);
		
		РабочиеДействия = А1Э_Структуры.Скопировать(Действия);
		А1Э_УниверсальнаяФорма.ДобавитьОбработчикМодуляКДействиям(РабочиеДействия, ИмяМодуля(), "ФормаПриСозданииНаСервере", 0);
		А1Э_УниверсальнаяФорма.ДобавитьОбработчикМодуляКДействиям(РабочиеДействия, ИмяМодуля(), "ПередУдалением");
		А1Э_УниверсальнаяФорма.ДобавитьОбработчикМодуляКДействиям(РабочиеДействия, ИмяМодуля(), "ФормаПередЗакрытием");
		А1Э_УниверсальнаяФорма.ДобавитьОбработчикМодуляКДействиям(РабочиеДействия, ИмяМодуля(), "ФормаПередЗакрытиемНаСервере");
		
		А1Э_УниверсальнаяФорма.ДобавитьОписаниеНастроекКомпонента(МассивОписаний, ИмяКомпонента, НастройкиКомпонента);
		
		Если НастройкиКомпонента.Отборы.Количество() > 0 Тогда
			А1Э_Формы.ДобавитьОписаниеГоризонтальнойГруппы(МассивОписаний, ИмяКомпонента + "___Отборы", , РодительЭлемента);
			Для Каждого Отбор Из НастройкиКомпонента.Отборы Цикл
				Колонка = А1Э_ТаблицыЗначений.НайтиСтроку(НастройкиКомпонента.Колонки, "Имя", Отбор);
				А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, ИмяПоляОтбора(ИмяКомпонента, Отбор), Колонка.Тип, , Колонка.Заголовок, ИмяКомпонента + "___Отборы", , ,
				А1Э_Структуры.Создать(
				"ПриИзменении", ИмяМодуля() + ".КомандаСохранитьДанные:НаСервере",
				));
			КонецЦикла;
		КонецЕсли;
		ОсновноеОписание = А1Э_Формы.ДобавитьОписаниеТаблицыФормы(МассивОписаний, ИмяКомпонента, Колонки, , РодительЭлемента, ПередЭлементом, РабочиеПараметры, РабочиеДействия);
		А1БК_КнопкаДанных.ДобавитьОписание(МассивОписаний, ИмяКомпонента + "___Сохранить", ИмяМодуля() + ".КомандаСохранитьДанные:НаСервере","Сохранить", ИмяКомпонента);
		А1БК_КнопкаДанных.ДобавитьОписание(МассивОписаний, ИмяКомпонента + "___ОтменитьИзменения", ИмяМодуля() + ".КомандаОбновитьДанныеБезСохранения:НаСервере", "Отменить изменения", ИмяКомпонента);
		
		Возврат ОсновноеОписание;
	КонецФункции
	
	// Аналогично "ДобавитьОписание", но Форма.Объект.Ссылка автоматически будет добавлено как ключ (и автоматически обновится при записи формы).
	//
	// Параметры:
	//  МассивОписаний	 - Массив - 
	//  ИмяКомпонента	 - Строка - 
	//  ИмяМетаданных	 - Строка - 
	//  ИмяРеквизита	 - Строка - имя реквизита регистра, в котором хранится ссылка и по которому должен быть сделан отбор.
	//  РодительЭлемента - 	 - 
	//  ПередЭлементом	 - 	 - 
	//  Параметры		 - 	 - 
	//  Действия		 - 	 - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция ДобавитьОписаниеСПодчинениемОбъекту(МассивОписаний, ИмяКомпонента, Знач ИмяМетаданных, ИмяРеквизита, РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		РабочиеПараметры = А1Э_Структуры.Скопировать(Параметры);
		РабочиеПараметры.Вставить("Ключи", А1Э_Структуры.Скопировать(А1Э_Структуры.ЗначениеСвойства(РабочиеПараметры, "Ключи")));
		РабочиеПараметры.Ключи.Вставить(ИмяРеквизита, Неопределено);
		РабочиеПараметры.Вставить("Контекст", А1Э_Структуры.Скопировать(А1Э_Структуры.ЗначениеСвойства(РабочиеПараметры, "Контекст")));
		РабочиеПараметры.Контекст.Вставить("ПодчинениеОбъекту__ИмяРеквизита", ИмяРеквизита);
		
		РабочиеДействия = А1Э_Структуры.Скопировать(Действия);
		А1Э_УниверсальнаяФорма.ДобавитьОбработчикКДействиям(РабочиеДействия, "КомпонентПередИсходнойЗагрузкойДанных", ИмяМодуля() + ".ПодчинениеОбъектуУстановитьКлюч", 0);
		А1Э_УниверсальнаяФорма.ДобавитьОбработчикКДействиям(РабочиеДействия, "ФормаПослеЗаписиНаСервере", ИмяМодуля() + ".ПодчинениеОбъектуФормаПослеЗаписиНаСервере", 0);
		
		Возврат ДобавитьОписание(МассивОписаний, ИмяКомпонента, ИмяМетаданных, РодительЭлемента, ПередЭлементом, РабочиеПараметры, РабочиеДействия);
	КонецФункции
	
	Функция ЗагрузитьДанные(Форма, ИмяКомпонента) Экспорт 
		НастройкиКомпонента = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
		
		Запрос = Новый Запрос;
		Запрос.Текст = НастройкиКомпонента.ТекстЗапроса;
		Если НЕ ЗначениеЗаполнено(Запрос.Текст) Тогда 
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ &ИмяТаблицы КАК Таблица ГДЕ &Отборы УПОРЯДОЧИТЬ ПО &Сортировка";
			Если НастройкиКомпонента.ТипМетаданных = "регистрсведений" И НастройкиКомпонента.ПериодическийРегистрСведений Тогда
				ИмяТаблицы = НастройкиКомпонента.ИмяМетаданных + ".СрезПоследних()";
			Иначе
				ИмяТаблицы = НастройкиКомпонента.ИмяМетаданных;
			КонецЕсли;
			А1Э_Строки.Подставить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
		КонецЕсли;
		Если СтрНайти(Запрос.Текст, "&Отборы") = 0 Тогда
			А1Э_Служебный.СлужебноеИсключение("В тексте запросе компонента РедактируемаяТаблицаДанных должна быть строка <&Отборы> (для подстановки служебных отборов)!");
		КонецЕсли;
		
		ПодставитьУсловияВТекстЗапроса(Запрос, Форма, ИмяКомпонента, НастройкиКомпонента);		
		ПодставитьСортировкуВТекстЗапроса(Запрос, Форма, ИмяКомпонента, НастройкиКомпонента);
		
		Форма[ИмяКомпонента].Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для Каждого Строка Из Форма[ИмяКомпонента] Цикл
			Для Каждого Колонка Из НастройкиКомпонента.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				Строка[ИмяКолонкиИсходногоЗначения(ИмяКолонки)] = Строка[ИмяКолонки];
			КонецЦикла;
		КонецЦикла;
		
	КонецФункции
	
	Функция СохранитьДанные(Форма, ИмяКомпонента) Экспорт
		Отказ = Ложь;
		А1Э_УниверсальнаяФорма.ВыполнитьОбработчикСобытияОбъектаФормы("КомпонентПередСохранением", ИмяКомпонента, Форма, Отказ);
		Если Отказ = Истина Тогда Возврат Истина; КонецЕсли;
		
		НастройкиКомпонента = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
		КоллекцияДанныхДляСохранения = КоллекцияДанныхДляСохранения(Форма, ИмяКомпонента);
		Результат = СохранитьКоллекцию(КоллекцияДанныхДляСохранения, НастройкиКомпонента);
		Если Результат = Ложь Тогда
			Сообщить("Не удалось сохранить данные!");
		Иначе
			Для Каждого Строка Из Результат.ИзмененныеСтроки Цикл	
				СтрокаКомпонента = Форма[ИмяКомпонента][Строка.А1__Индекс];
				ЗаполнитьЗначенияСвойств(СтрокаКомпонента, Строка);
				Для Каждого Колонка Из НастройкиКомпонента.Колонки Цикл
					СтрокаКомпонента[Колонка.ИмяИсходногоЗначения] = СтрокаКомпонента[Колонка.Имя];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		НастройкиКомпонента.УдаленныеСтроки.Очистить();
		
		А1Э_УниверсальнаяФорма.ВыполнитьОбработчикСобытияОбъектаФормы("КомпонентПослеСохранения", ИмяКомпонента, Форма);
		
	КонецФункции
	
	Функция ОбновитьДанные(Форма, ИмяКомпонента) Экспорт 
		СохранитьДанные(Форма, ИмяКомпонента);
		ЗагрузитьДанные(Форма, ИмяКомпонента);
	КонецФункции
	
#КонецЕсли

Функция ЕстьИзменения(Форма, ИмяКомпонента) Экспорт 
	Настройки = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
	Если Настройки.УдаленныеСтроки.Количество() > 0 Тогда Возврат Истина; КонецЕсли;
	Таблица = Форма[ИмяКомпонента];
	Колонки = Настройки.Колонки;
	Для Сч = 0 По Таблица.Количество() - 1 Цикл
		Строка = Таблица[Сч];
		Если СтрокаИзменена(Таблица[Сч], Колонки) Тогда Возврат Истина; КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ИмяКомандыСохранить(ИмяКомпонента) Экспорт 
	Возврат ИмяКомпонента + "___Сохранить";
КонецФункции

Функция ИмяКомандыОтменитьИзменения(ИмяКомпонента) Экспорт
	Возврат ИмяКомпонента + "___ОтменитьИзменения";	
КонецФункции

#КонецОбласти 

#Область События
#Если НЕ Клиент Тогда
	
	Функция ФормаПриСозданииНаСервере(ИмяКомпонента, Форма, Отказ, СтандартнаяОбработка) Экспорт
		НастройкиКомпонента = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
		А1Э_УниверсальнаяФорма.ВыполнитьОбработчикСобытияОбъектаФормы("КомпонентПередИсходнойЗагрузкойДанных", ИмяКомпонента, Форма);
		ЗагрузитьДанные(Форма, ИмяКомпонента);
	КонецФункции
	
	Функция ФормаПередЗакрытиемНаСервере(ИмяКомпонента, Форма, Отказ, СтандартнаяОбработка) Экспорт
		Попытка
			СохранитьДанные(Форма, ИмяКомпонента);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить("Не удалось сохранить изменения по причине: " + ОписаниеОшибки);
			Отказ = Истина;
		КонецПопытки;
		
	КонецФункции 
#КонецЕсли

#Если Клиент Тогда
	
	Функция ФормаПередЗакрытием(ИмяКомпонента, Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
		Если ЗавершениеРаботы = Ложь Тогда Возврат Неопределено; КонецЕсли;
		
		КоллекцияДанныхДляСохранения = КоллекцияДанныхДляСохранения(Форма, ИмяКомпонента);
		Если КоллекцияДанныхДляСохранения.ИзмененныеСтроки.Количество() = 0 И 
			КоллекцияДанныхДляСохранения.УдаленныеСтроки.Количество() = 0 Тогда Возврат Неопределено КонецЕсли; 
		
		ТекстПредупреждения = "Не сохраненные изменения будут потеряны! Рекомендуем сохранить данные перед завершением работы!";
	КонецФункции 
	
	Функция ПередУдалением(Форма, Элемент, Отказ) Экспорт 
		ИмяКомпонента = Элемент.Имя;
		НастройкиКомпонента = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
		НастройкиКомпонента.УдаленныеСтроки.Добавить(ДанныеСтрокиДляУдаления(Элемент.ТекущиеДанные, НастройкиКомпонента.Колонки));
	КонецФункции 
	
#КонецЕсли
#КонецОбласти

#Область Команды
#Если НЕ Клиент Тогда
	
	Функция КомандаСохранитьДанные(Форма, ИмяКоманды) Экспорт  
		ИмяКомпонента = А1Э_УниверсальнаяФорма.ИмяКомпонента(ИмяКоманды);
		Отказ = СохранитьДанные(Форма, ИмяКомпонента);
		Если Отказ = Истина Тогда Возврат Неопределено; КонецЕсли;
		ЗагрузитьДанные(Форма, ИмяКомпонента); 
	КонецФункции
	
	Функция КомандаОбновитьДанныеБезСохранения(Форма, ИмяКоманды) Экспорт 
		ИмяКомпонента = А1Э_УниверсальнаяФорма.ИмяКомпонента(ИмяКоманды);
		ЗагрузитьДанные(Форма, ИмяКомпонента);
	КонецФункции 
	
#КонецЕсли
#КонецОбласти 

#Область Служебно
#Если НЕ Клиент Тогда
	
	Функция СохранитьКоллекцию(КоллекцияДанных, НастройкиКомпонента) Экспорт
		НачатьТранзакцию();
		
		Попытка
			Если НастройкиКомпонента.ТипМетаданных = "регистрсведений" Тогда
				Если НЕ НастройкиКомпонента.НаборЗаписей Тогда
					ЗаписатьРегистрСведенийМенеджерамиЗаписей(КоллекцияДанных, НастройкиКомпонента);
				Иначе
					ЗаписатьРегистрСведенийНаборомЗаписей(КоллекцияДанных, НастройкиКомпонента);
				КонецЕсли;
			ИначеЕсли НастройкиКомпонента.ТипМетаданных = "регистрнакопления" Тогда 
				ЗаписатьРегистрНакопления(КоллекцияДанных, НастройкиКомпонента);
			КонецЕсли;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить("Не удалось записать данные по причине: " + ОписаниеОшибки);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		Возврат КоллекцияДанных;
	КонецФункции 
	
	Функция ЗаписатьРегистрСведенийМенеджерамиЗаписей(КоллекцияДанных, НастройкиКомпонента)
		Менеджер = А1Э_Метаданные.МенеджерОбъекта(НастройкиКомпонента.ИмяМетаданных);
		Для Каждого Строка Из КоллекцияДанных.УдаленныеСтроки Цикл
			//Ожидаем, что пользователи не могут удалять строки периодического регистра сведений. Это заблокировано в интерфейсе.
			Если НастройкиКомпонента.ПериодическийРегистрСведений Тогда Продолжить; КонецЕсли;
				
			МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НастройкиКомпонента.Ключи);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		Для Каждого Строка Из КоллекцияДанных.ИзмененныеСтроки Цикл
			МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НастройкиКомпонента.Ключи);
			Если НастройкиКомпонента.ПериодическийРегистрСведений Тогда
				МенеджерЗаписи.Период = ТекущаяДата();
			КонецЕсли;
			МенеджерЗаписи.Записать(Истина);
			ЗаполнитьЗначенияСвойств(Строка, МенеджерЗаписи);
		КонецЦикла;
	КонецФункции
	
	Функция ЗаписатьРегистрСведенийНаборомЗаписей(КоллекцияДанных, НастройкиКомпонента)
		Менеджер = А1Э_Метаданные.МенеджерОбъекта(НастройкиКомпонента.ИмяМетаданных);
		НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
		Для Каждого Пара Из НастройкиКомпонента.Ключи Цикл
			НаборЗаписей.Отбор[Пара.Ключ].Установить(Пара.Значение);
		КонецЦикла;
		Если НастройкиКомпонента.ПериодическийРегистрСведений Тогда
			ТекущаяДата = ТекущаяДата();
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
			Для Каждого Строка Из КоллекцияДанных.ИзмененныеСтроки Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Строка);
				ЗаполнитьЗначенияСвойств(Запись, НастройкиКомпонента.Ключи);
				Запись.Период = ТекущаяДата;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			Возврат Неопределено;
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		Таблица = НаборЗаписей.Выгрузить();
		
		СтруктураОтбора = Новый Структура;
		ОбъектМетаданных = А1Э_Метаданные.ОбъектМетаданных(НастройкиКомпонента.ИмяМетаданных);
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Если НастройкиКомпонента.Ключи.Свойство(Измерение.Имя) Тогда Продолжить; КонецЕсли;
			СтруктураОтбора.Вставить(Измерение.Имя);
		КонецЦикла;
		
		СтрокиКДобавлению = Новый Массив;
		Для Каждого Строка Из КоллекцияДанных.ИзмененныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			ПодходящиеСтроки = Таблица.НайтиСтроки(СтруктураОтбора);
			Если ПодходящиеСтроки.Количество() = 0 Тогда
				СтрокиКДобавлению.Добавить(Строка);
				Продолжить;
			КонецЕсли;
			Для Каждого ПодходящаяСтрока Из ПодходящиеСтроки Цикл
				ЗаполнитьЗначенияСвойств(ПодходящаяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(ПодходящаяСтрока, НастройкиКомпонента.Ключи);
			КонецЦикла;
		КонецЦикла;
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого Строка Из КоллекцияДанных.УдаленныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			ПодходящиеСтроки = Таблица.НайтиСтроки(СтруктураОтбора);
			А1Э_Массивы.Добавить(СтрокиКУдалению, ПодходящиеСтроки);
		КонецЦикла;
		Для Каждого Строка Из СтрокиКУдалению Цикл
			Таблица.Удалить(Строка);
		КонецЦикла;
		
		Для Каждого Строка Из СтрокиКДобавлению Цикл
			СтрокаНабораЗаписей = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, Строка);
			ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, НастройкиКомпонента.Ключи);
		КонецЦикла;
		
		НаборЗаписей.Загрузить(Таблица);
		НаборЗаписей.Записать();
		
	КонецФункции
	
	Функция ЗаписатьРегистрНакопления(КоллекцияДанных, НастройкиКомпонента)
		Менеджер = А1Э_Метаданные.МенеджерОбъекта(НастройкиКомпонента.ИмяМетаданных);
		НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(НастройкиКомпонента.Ключи.Регистратор);
		НаборЗаписей.Прочитать();
		СтрокиКДобавлению = Новый Массив;
		Для Каждого Строка Из КоллекцияДанных.ИзмененныеСтроки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.НомерСтроки) Тогда
				СтрокиКДобавлению.Добавить(Строка);
				Продолжить;
			КонецЕсли;
			СтрокаНабораЗаписей = НаборЗаписей[Строка.НомерСтроки - 1];
			ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, Строка);
			ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, НастройкиКомпонента.Ключи); 
		КонецЦикла;
		
		НомераСтрокаКУдалению = Новый Массив;
		Для Каждого Строка Из КоллекцияДанных.УдаленныеСтроки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.НомерСтроки) Тогда Продолжить; КонецЕсли;
			НомераСтрокаКУдалению.Добавить(Строка.НомерСтроки);
		КонецЦикла;
		А1Э_Массивы.Сортировать(НомераСтрокаКУдалению, "Убыв");
		Для Каждого НомерСтроки Из НомераСтрокаКУдалению Цикл
			НаборЗаписей.Удалить(НомерСтроки - 1);
		КонецЦикла;
		
		Для Каждого Строка Из СтрокиКДобавлению Цикл
			СтрокаНабораЗаписей = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, Строка);
			ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, НастройкиКомпонента.Ключи);
		КонецЦикла;
		//ТУДУ - реализовать возврат измененных строк.
	КонецФункции
	
	Функция ДобавитьКолонку(Колонки, НастройкиКомпонента, ИсточникДанных) 
		Если А1Э_Общее.Свойство(ИсточникДанных, "Метаданные") Тогда
			ДанныеДляОписания = ИсточникДанных.Метаданные;
		Иначе
			ДанныеДляОписания = ИсточникДанных;
		КонецЕсли;
		
		ОписаниеКолонки = ОписаниеКолонки(ДанныеДляОписания);
		Колонки.Добавить(ОписаниеКолонки);
		Колонки.Добавить(ОписаниеКолонкиИсходныхЗначений(ДанныеДляОписания));
		НастройкиКомпонента.Колонки.Добавить(А1Э_Структуры.Создать(
		"Имя", ОписаниеКолонки.Имя,
		"Тип", ОписаниеКолонки.Тип,
		"Заголовок", ОписаниеКолонки.Заголовок,
		"ИмяИсходногоЗначения", ИмяКолонкиИсходногоЗначения(ОписаниеКолонки.Имя),
		"ЭтоИзмерение", А1Э_Структуры.ЗначениеСвойства(ИсточникДанных, "ЭтоИзмерение", Ложь),
		));
	КонецФункции
	
	Функция ОписаниеКолонки(ИсточникДанных)
		Если ТипЗнч(ИсточникДанных) = Тип("ОбъектМетаданных") Тогда
			ПараметрыКолонки = А1Э_Структуры.Создать(
			"ПараметрыВыбора", ИсточникДанных.ПараметрыВыбора,
			"СвязиПараметровВыбора", ИсточникДанных.СвязиПараметровВыбора);
			
			Возврат А1Э_Структуры.Создать(
			"Имя", ИсточникДанных.Имя,
			"Тип", ИсточникДанных.Тип,
			"Заголовок", ИсточникДанных.Синоним,
			"Параметры", ПараметрыКолонки);
		Иначе
			Возврат А1Э_Формы.ДанныеКолонкиТаблицыФормы(ИсточникДанных);
		КонецЕсли;
		
	КонецФункции 
	
	Функция ОписаниеКолонкиИсходныхЗначений(ИсточникДанных)
		ОписаниеКолонки = ОписаниеКолонки(ИсточникДанных);
		ОписаниеКолонки.Имя = ИмяКолонкиИсходногоЗначения(ОписаниеКолонки.Имя);
		ОписаниеКолонки.Параметры.Вставить("Видимость", Ложь);
		Возврат ОписаниеКолонки;
	КонецФункции
	
	Функция АктуальныеКолонкиРегистра(НастройкиКомпонента) 
		МетаданныеОбъекта = А1Э_Метаданные.ОбъектМетаданных(НастройкиКомпонента.ИмяМетаданных);
		АктуальныеКолонки = Новый Массив;
		Для Каждого Колонка Из МетаданныеОбъекта.Измерения Цикл
			Если НастройкиКомпонента.Ключи.Свойство(Колонка.Имя) Тогда Продолжить; КонецЕсли;
			АктуальныеКолонки.Добавить(НовыйСтруктураКолонки(Колонка, Истина));
		КонецЦикла;
		
		ДобавитьКолонкиРесурсовРеквизитов(МетаданныеОбъекта.Ресурсы, АктуальныеКолонки, НастройкиКомпонента);
		ДобавитьКолонкиРесурсовРеквизитов(МетаданныеОбъекта.Реквизиты, АктуальныеКолонки, НастройкиКомпонента);
		
		Возврат АктуальныеКолонки;
	КонецФункции
	
	Функция ДобавитьКолонкиРесурсовРеквизитов(Коллекция, АктуальныеКолонки, НастройкиКомпонента) 
		Для Каждого Колонка Из Коллекция Цикл
			Если НастройкиКомпонента.Ключи.Свойство(Колонка.Имя) Тогда
				А1Э_Служебный.СлужебноеИсключение("Ключ редактируемой таблицы данных может быть только измерением!");
			КонецЕсли;
			АктуальныеКолонки.Добавить(НовыйСтруктураКолонки(Колонка, Ложь));
		КонецЦикла;
	КонецФункции
	
	Функция ПодставитьУсловияВТекстЗапроса(Запрос, Форма, ИмяКомпонента, НастройкиКомпонента)
		Условия = Новый Массив;	
		Сч = 0;
		Для Каждого Пара Из НастройкиКомпонента.Ключи Цикл
			Сч = Сч + 1;
			Условия.Добавить("Таблица." + Пара.Ключ + " = &Параметр" + Сч);
			Запрос.УстановитьПараметр("Параметр" + Сч, Пара.Значение);
		КонецЦикла;
		Для Каждого Отбор Из НастройкиКомпонента.Отборы Цикл
			Если НЕ ЗначениеЗаполнено(Форма[ИмяПоляОтбора(ИмяКомпонента, Отбор)]) Тогда Продолжить; КонецЕсли;
			Сч = Сч + 1;
			Условия.Добавить("Таблица." + Отбор + " = &Параметр" + Сч);
			Запрос.УстановитьПараметр("Параметр" + Сч, Форма[ИмяПоляОтбора(ИмяКомпонента, Отбор)]);
		КонецЦикла;
		А1Э_Запросы.ПодставитьУсловие(Запрос.Текст, "&Отборы", Условия);
	КонецФункции
	
	Функция ПодставитьСортировкуВТекстЗапроса(Запрос, Форма, ИмяКомпонента, НастройкиКомпонента) 
		Сортировка = НастройкиКомпонента.Сортировка;
		Если НастройкиКомпонента.ТекстЗапроса = Неопределено И А1Э_Структуры.ЯвляетсяСтруктурой(Сортировка) Тогда
			ТекстСортировки = "";
			НужнаЗапятая = Ложь;
			Для Каждого Пара Из Сортировка Цикл
				ТекстСортировки = 
					ТекстСортировки +
					?(НужнаЗапятая, ",", "") +
					"
					|	" +
					Пара.Ключ + 
					" " + 
					?(Пара.Значение, "ВОЗР", "УБЫВ");
				НужнаЗапятая = Истина;
			КонецЦикла;
		Иначе
        	ТекстСортировки = "ИСТИНА";
		КонецЕсли;
		А1Э_Строки.Подставить(Запрос.Текст, "&Сортировка", ТекстСортировки);
	КонецФункции 
#КонецЕсли

Функция КоллекцияДанныхДляСохранения(Форма, ИмяКомпонента) 
	Настройки = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
	УдаленныеСтроки = Настройки.УдаленныеСтроки;
	Колонки = Настройки.Колонки;
	ИзмененныеСтроки = Новый Массив;
	Таблица = Форма[ИмяКомпонента]; 
	Для Сч = 0 По Таблица.Количество() - 1 Цикл
		Строка = Таблица[Сч];
		Если НЕ СтрокаИзменена(Строка, Колонки) Тогда Продолжить; КонецЕсли;
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("А1__Индекс", Сч);
		ИзмеренияИзменены = Ложь;
		Для Каждого Колонка Из Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
			Если НЕ Колонка.ЭтоИзмерение Тогда Продолжить; КонецЕсли;
			Если Строка[Колонка.Имя] <> Строка[Колонка.ИмяИсходногоЗначения] Тогда ИзмеренияИзменены = Истина; КонецЕсли;				
		КонецЦикла;
		ИзмененныеСтроки.Добавить(СтруктураСтроки);
		Если ИзмеренияИзменены Тогда 
			УдаленныеСтроки.Добавить(ДанныеСтрокиДляУдаления(Строка, Колонки));
		КонецЕсли;
	КонецЦикла;
	
	Возврат А1Э_Структуры.Создать(
	"ИзмененныеСтроки", ИзмененныеСтроки,
	"УдаленныеСтроки", УдаленныеСтроки,
	);
КонецФункции

Функция ДанныеСтрокиДляУдаления(Строка, Колонки)
	Результат = Новый Структура;
	Для Каждого Колонка Из Колонки Цикл
		Если НЕ Колонка.ЭтоИзмерение Тогда Продолжить; КонецЕсли;
		Результат.Вставить(Колонка.Имя, Строка[Колонка.ИмяИсходногоЗначения]); 
	КонецЦикла;
	Возврат Результат;	
КонецФункции 

Функция СтрокаИзменена(Строка, Колонки)
	Для Каждого Колонка Из Колонки Цикл
		Если Строка[Колонка.Имя] <> Строка[Колонка.ИмяИсходногоЗначения] Тогда Возврат Истина; КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ИзмененныеСтроки(Форма, ИмяКомпонента) 
	НастройкиКомпонента = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
	Результат = Новый Массив;
	Для Каждого Строка Из Форма[ИмяКомпонента] Цикл
		Для Каждого Колонка Из НастройкиКомпонента.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Если Строка[ИмяКолонки] <> Строка[ИмяКолонкиИсходногоЗначения(ИмяКолонки)] Тогда
				Результат.Добавить(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ИмяКолонкиИсходногоЗначения(ИмяКолонки)
	Возврат ИмяКолонки + "__ИсходноеЗначение";
КонецФункции

Функция НовыйСтруктураКолонки(Колонка, ЭтоИзмерение)
	Возврат А1Э_Структуры.Создать(
	"Метаданные", Колонка,
	"ЭтоИзмерение", ЭтоИзмерение
	);
КонецФункции 

Функция ИмяПоляОтбора(ИмяКомпонента, Отбор)
	Возврат ИмяКомпонента + "___Отбор" + Отбор;
КонецФункции

#КонецОбласти 

#Область ПодчинениеОбъекту
#Если НЕ Клиент Тогда
	
	Функция ПодчинениеОбъектуУстановитьКлюч(ИмяКомпонента, Форма, П1 = Неопределено, П2 = Неопределено, П3 = Неопределено) Экспорт 
		Настройки = А1Э_УниверсальнаяФорма.НастройкиКомпонента(Форма, ИмяКомпонента);
		Настройки.Ключи.Вставить(Настройки.Контекст.ПодчинениеОбъекту__ИмяРеквизита, Форма.Объект.Ссылка);
	КонецФункции
	
	Функция ПодчинениеОбъектуФормаПослеЗаписиНаСервере(ИмяКомпонента, Форма, П1 = Неопределено, П2 = Неопределено, П3 = Неопределено) Экспорт
		ПодчинениеОбъектуУстановитьКлюч(ИмяКомпонента, Форма);
		СохранитьДанные(Форма, ИмяКомпонента);
	КонецФункции 
#КонецЕсли 
#КонецОбласти

Функция ИмяМодуля() Экспорт
	Возврат "А1БК_РедактируемаяТаблицаДанных";
КонецФункции 

